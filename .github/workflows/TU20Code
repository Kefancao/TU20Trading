# Simple/Exponential Moving Average(Hello)
# Fib Retracement
# MACD
# Bollinger Band
# Relative Strength Index
# ADX
#

# Given a list of prices

#Period = 9, longer period = 54


# ****************************************************************
# *    SMA Crossover Buy/Sell
# *    Should buy when the fast moving average crosses over the 
# *    slow moving average and vice versa
# ****************************************************************

# Methods in the 'stock' class include the following:
# SMA
# EMA
class stock:
    def __init__(self, ticker, prices, volume):
        self.ticker = ticker
        self.prices = prices
        self.volume = volume
        
    def sma(self, period):
    d = 0 
    total = 0 
    averages = []
    acc = period

    while acc != 1:
        averages.append(0)
        acc -=1
    for item in self.prices:
        total = 0
        i = 0 
        if d + period >= len(self.prices):
            break
        while i != period: 
            total += self.prices[d + i]
            i += 1

        averages.append(total / period)
        d+= 1

    return averages
        
    def ema(self, period):
        smoothing = 2
        adj_factor = smoothing / (1 + period)
        e_0 = self.prices[0] * adj_factor
        result = [e_0]
        for i in range(1,len(self.prices)) :
            e_1 = e_0 * (1 - adj_factor) + self.prices[i] * adj_factor
            e_0 = e_1 
            result.append(e_0)
        return result

    # requires : fast < slow
    def compare_sma(self, slow, fast):
        slow = sma(self.prices, slow)
        fast = sma(self.prices, fast)

        if fast[-1] > slow[-1]:
            return "buy"
        else: 
        return "sell"

# ****************************************************************
# ****************************************************************
# ****************************************************************


p = [2, 2, 3, 4, 4, 3, 2, 2, 3, 4, 5, 6, 6, 5, 5, 4, 4, 3, 4, 4, 3]
q = [3693,3723,3727,3731,3754,5699,3725,3746,3803,3824]
r = [6,6,5,4,3,5,4,5,4,6,7,8,7,7,6,5,5,3,4,4,6,7,8,7,9,6,5,3,3,2,1,3,6,7,8]

def average_change(prices,period) :
    p = period
    RSI = []
    gains_sofar = 0
    losses_sofar = 0
    while p != 1 :
        p -= 1
        RSI.append(0)
        a = prices[period-p]
        b = prices[period-p+1]
        if a < b :
            gains_sofar += b - a
        elif a > b:
            losses_sofar += a - b
    av_gains_0 = gains_sofar / period
    av_losses_0 = losses_sofar / period
    rsi_0 = 100 - 100 / (1 + av_gains_0 / av_losses_0)
    for i in range(period,len(prices)) :
        a = prices[i]
        b = prices[i - 1]
        if a > b : # gain
            av_gains_1 = (av_gains_0 * (period - 1) + prices[i] - prices[i - 1]) / period
            av_gains_0 = av_gains_1
            av_losses_1 = av_losses_0 * (period - 1) / period
            av_losses_0 = av_losses_1
            rsi_1 = 100 - 100 / (1 + av_gains_0 / av_losses_0)
            rsi_0 = rsi_1
            RSI.append(rsi_0)
        elif a < b: # loss
            av_gains_1 = av_gains_0 * (period - 1) / period
            av_gains_0 = av_gains_1
            av_losses_1 = (av_losses_0 * (period - 1) + prices[i - 1] - prices[i]) / period
            av_losses_0 = av_losses_1
            rsi_1 = 100 - 100 / (1 + av_gains_0 / av_losses_0)
            rsi_0 = rsi_1
            RSI.append(rsi_0)
        elif a == b : # no change
            av_gains_1 = av_gains_0 * (period - 1) / period
            av_gains_0 = av_gains_1
            av_losses_1 = av_losses_0 * (period - 1) / period
            av_losses_0 = av_losses_1
            rsi_1 = 100 - 100 / (1 + av_gains_0 / av_losses_0)
            rsi_0 = rsi_1
            RSI.append(rsi_0)
    return RSI
